--- libraries/DataFlash/LogFile.cpp	2014-04-15 11:44:17.000000000 +0600
+++ libraries/DataFlash/LogFile.cpp	2014-01-14 12:39:42.000000000 +0600
@@ -430,6 +452,7 @@ void DataFlash_Block::LogReadProcess(uin
 {
     uint8_t log_step = 0;
     uint16_t page = start_page;
+    bool first_entry = true;
 
     if (df_BufferIdx != 0) {
         FinishWrite();
@@ -460,6 +483,10 @@ void DataFlash_Block::LogReadProcess(uin
 
 			case 2:
 				log_step = 0;
+                if (first_entry && data != LOG_FORMAT_MSG) {
+                    _print_log_formats(num_types, structure, port);
+                }
+                first_entry = false;
                 _print_log_entry(data, num_types, structure, print_mode, port);
                 break;
 		}
@@ -628,7 +655,8 @@ void DataFlash_Class::Log_Write_GPS(cons
     struct log_GPS pkt = {
         LOG_PACKET_HEADER_INIT(LOG_GPS_MSG),
     	status        : (uint8_t)gps->status(),
-    	gps_time      : gps->time,
+    	gps_week_ms   : gps->time_week_ms,
+    	gps_week      : gps->time_week,
         num_sats      : gps->num_sats,
         hdop          : gps->hdop,
         latitude      : gps->latitude,
@@ -636,28 +664,64 @@ void DataFlash_Class::Log_Write_GPS(cons
         rel_altitude  : relative_alt,
         altitude      : gps->altitude_cm,
         ground_speed  : gps->ground_speed_cm,
-        ground_course : gps->ground_course_cd
+        ground_course : gps->ground_course_cd,
+        vel_z         : gps->velocity_down(),
+        apm_time      : hal.scheduler->millis()
     };
     WriteBlock(&pkt, sizeof(pkt));
 }
 
+// Write an RCIN packet
+void DataFlash_Class::Log_Write_RCIN(void)
+{
+    struct log_RCIN pkt = {
+        LOG_PACKET_HEADER_INIT(LOG_RCIN_MSG),
+        timestamp     : hal.scheduler->millis(),
+        chan1         : hal.rcin->read(0),
+        chan2         : hal.rcin->read(1),
+        chan3         : hal.rcin->read(2),
+        chan4         : hal.rcin->read(3),
+        chan5         : hal.rcin->read(4),
+        chan6         : hal.rcin->read(5),
+        chan7         : hal.rcin->read(6),
+        chan8         : hal.rcin->read(7)
+    };
+    WriteBlock(&pkt, sizeof(pkt));
+}
 
-// Write an raw accel/gyro data packet
-void DataFlash_Class::Log_Write_IMU(const AP_InertialSensor *ins)
+// Write an SERVO packet
+void DataFlash_Class::Log_Write_RCOUT(void)
 {
-    Vector3f gyro = ins->get_gyro();
-    Vector3f accel = ins->get_accel();
-    float Temp = ins->get_temperature();
+    struct log_RCOUT pkt = {
+        LOG_PACKET_HEADER_INIT(LOG_RCOUT_MSG),
+        timestamp     : hal.scheduler->millis(),
+        chan1         : hal.rcout->read(0),
+        chan2         : hal.rcout->read(1),
+        chan3         : hal.rcout->read(2),
+        chan4         : hal.rcout->read(3),
+        chan5         : hal.rcout->read(4),
+        chan6         : hal.rcout->read(5),
+        chan7         : hal.rcout->read(6),
+        chan8         : hal.rcout->read(7)
+    };
+    WriteBlock(&pkt, sizeof(pkt));
+}
+
 
+// Write an raw accel/gyro data packet
+void DataFlash_Class::Log_Write_IMU(const AP_InertialSensor &ins)
+{
+    const Vector3f &gyro = ins.get_gyro();
+    const Vector3f &accel = ins.get_accel();
     struct log_IMU pkt = {
         LOG_PACKET_HEADER_INIT(LOG_IMU_MSG),
+        timestamp : hal.scheduler->millis(),
         gyro_x  : gyro.x,
         gyro_y  : gyro.y,
         gyro_z  : gyro.z,
         accel_x : accel.x,
         accel_y : accel.y,
-        accel_z : accel.z,
-        temp	: Temp
+        accel_z : accel.z
     };
     WriteBlock(&pkt, sizeof(pkt));
 }
